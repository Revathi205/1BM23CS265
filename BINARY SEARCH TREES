 #include<stdio.h>
 #include<stdlib.h>
 struct tree{
 int data;
 struct tree *left;
 struct tree *right;
 };
 struct tree *createnode(int data){
 struct tree *newnode=(struct tree*)malloc(sizeof(struct tree));
 newnode->data=data;
 newnode->left = NULL;
 newnode->right = NULL;
 return newnode;
 }
 struct tree *insert(struct tree *root, int data){
 if(root == NULL){
 root = createnode(data);
 }
 if(data< root->data){
 root->left = insert(root->left, data);
 }else if(data> root->data){
 root->right = insert(root->right, data);
 }
 return root;
 }
 void inorder(struct tree *root){
 if(root != NULL){
 inorder(root->left);
 printf("%d ", root->data);
 inorder(root->right);
 }
 }
 void preorder(struct tree *root){
 if(root != NULL){
 printf("%d ", root->data);
 preorder(root->left);
 preorder(root->right);
 }
 }
 void postorder(struct tree *root){
 if(root != NULL){
 postorder(root->left);
 postorder(root->right);
 printf("%d ", root->data);
 }
 }
 int main(){
 int option, data;
 struct tree *root = NULL;
 while(1){
 printf("1. Insert\n2. Inorder\n3. Preorder\n4. Postorder\n5. Exit \n");
 scanf("%d", &option);
 switch(option){
 38| Page
case 1:
 printf("Enter data: ");
 scanf("%d", &data);
 root = insert(root, data);
 break;
 case 2:
 printf("Inorder traversal : ");
 inorder(root);
 printf("/n");
 break;
 case 3:
 printf("Preorder traversal : ");
 preorder(root);
 printf("/n");
 break;
 case 4:
 printf("Postorder traversal : ");
 postorder(root);
 printf("/n");
 break;
 case 5:
 exit(0);
 break;
 default:
 printf("Invalid option\n");
 }
 }
 }
 OUTPUT:
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
Enter data: 5
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
Enter data: 3
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
Enter data: 8
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
Enter data: 1
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
Enter data: 4
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
Inorder traversal : 1 3 4 5 8
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
Preorder traversal : 5 3 1 4 8
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit
Postorder traversal : 1 4 3 8 5
1. Insert
2. Inorder
3. Preorder
4. Postorder
5. Exit

